/*
 * Exercise 1.9.  Each of the following two procedures defines a method for
 * adding two positive integers in terms of the procedures inc, which increments
 * its argument by 1, and dec, which decrements its argument by 1.
 *
 *
 * (define (+ a b)
 *   (if (= a 0)
 *       b
 *      (inc (+ (dec a) b))))
 *
 * (define (+ a b)
 *   (if (= a 0)
 *       b
 *       (+ (dec a) (inc b))))
 *
 * Using the substitution model, illustrate the process generated by each
 * procedure in evaluating (+ 4 5). Are these processes iterative or recursive?
 */
""""
  linear recursive

  (inc (+ (dec 4) 5))
  (inc (+ 3 5))
  (inc (inc (+ (dec 3) 5)))
  (inc (inc (+ 2 5)))
  (inc (inc (inc (+ (dec 2) 5))))
  (inc (inc (inc (+ 1 5))))
  (inc (inc (inc (inc (+ (dec 1) 5))))
  (inc (inc (inc (inc (+ 0 5))))
  (inc (inc (inc (inc 5))))
  (inc (inc (inc (6))))
  (inc (inc (7)))
  (inc (8))
  (9)

  iterative

  (+ (dec 4) (inc 5))
  (+ 3 6)
  (+ (dec 3) (inc 6))
  (+ 2 7)
  (+ (dec 2) (inc 7))
  (+ 1 8)
  (+ (dec 1) (inc 8))
  (+ 0 9)
  9
"""

/*
 * Exercise 1.10.  The following procedure computes a mathematical function called
 * Ackermann's function.
 *
 * (define (A x y)
 *  (cond ((= y 0) 0)
 *        ((= x 0) (* 2 y))
 *        ((= y 1) 2)
 *        (else (A (- x 1)
 *                 (A x (- y 1))))))
 *
 * What are the values of the following expressions?
 *
 * (A 1 10)
 * (A 2 4)
 * (A 3 3)
 *
 * Consider the following procedures, where A is the procedure defined above:
 *
 * (define (f n) (A 0 n))
 * (define (g n) (A 1 n))
 * (define (h n) (A 2 n))
 * (define (k n) (* 5 n n))
 *
 * Give concise mathematical definitions for the functions computed by the
 * procedures f, g, and h for positive integer values of n. For example, (k n)
 * computes 5n2.
 */
def A(x:Long, y:Long):Long =
  if(y == 0) 0
  else if(x == 0) 2 * y
  else if(y == 1) 2
  else (A(x - 1, A(x, y - 1)))

A(1, 10)
A(2, 4)
A(3, 3)

def f(n:Long) = A(0, n)
def g(n:Long) = A(1, n)
def h(n:Long) = A(2, n)
def k(n:Long) = 5 * n * n

h(1)
h(2)
h(3)
h(4)
"2^h(n-1)"

